buildscript {
	project.version = '4.0.0'
	project.group = 'de.pottgames'
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
    id 'java'
    id "me.champeau.jmh" version "0.6.6"
}

// ECLIPSE SETTINGS
eclipse.project.name = 'TuningFork-core'

// ENCODING SETTINGS
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

repositories {
    mavenLocal()
	mavenCentral()
	google()
	maven { url 'https://plugins.gradle.org/m2/' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	maven { url 'https://jitpack.io' }
	gradlePluginPortal()
}

dependencies {
	// compileOnly here is kinda hacky but probably (afaik) the best solution we can get
	compileOnly "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	
	implementation 'com.github.Hangman:FLAC-library-Java:90cee6f500'
	
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    testImplementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    
    jmh "org.openjdk.jmh:jmh-core:1.34"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:1.34"
    jmh "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    jmh "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    jmh "com.badlogicgames.gdx:gdx:$gdxVersion"
}

allprojects {
	sourceCompatibility = JavaLanguageVersion.of(8)
	compileJava {
		options.incremental = true
	}
	
	if(JavaVersion.current().isJava9Compatible()) {
        tasks.withType(JavaCompile) {
            options.release.set(8)
        }
    }
}

java {
    withSourcesJar()
}

test {
     exclude 'de/pottgames/tuningfork/test/InputAdapter.class'
     exclude 'de/pottgames/tuningfork/test/Rng.class'
     exclude 'de/pottgames/tuningfork/test/MiniExample.class'
     exclude 'de/pottgames/tuningfork/test/DeviceTest.class'
     exclude 'de/pottgames/tuningfork/test/HrtfTest.class'
     exclude 'de/pottgames/tuningfork/test/AsyncLoadTest.class'
     exclude 'de/pottgames/tuningfork/test/EffectTest.class'
     exclude 'de/pottgames/tuningfork/test/PlaybackPositionBufferedSourceTest.class'
     exclude 'de/pottgames/tuningfork/test/FilterTest.class'
     exclude 'de/pottgames/tuningfork/test/PcmSoundSourceTest.class'
     exclude 'de/pottgames/tuningfork/test/StreamedSoundSourceTest.class'
     exclude 'de/pottgames/tuningfork/test/ProceduralSoundTest.class'
     exclude 'de/pottgames/tuningfork/test/Note.class'
     exclude 'de/pottgames/tuningfork/test/SongNote.class'
     exclude 'de/pottgames/tuningfork/test/SongGenerator.class'
     exclude 'de/pottgames/tuningfork/test/CaptureTest.class'
     exclude 'de/pottgames/tuningfork/test/EightBitTest.class'
     exclude 'de/pottgames/tuningfork/test/FlacTest.class'
     exclude 'de/pottgames/tuningfork/test/ResamplerTest.class'
     exclude 'de/pottgames/tuningfork/test/PanningTest.class'
     exclude 'de/pottgames/tuningfork/test/WavFloat32PcmTest.class'
     exclude 'de/pottgames/tuningfork/test/WavFloat64PcmTest.class'
     exclude 'de/pottgames/tuningfork/test/WavInt24PcmTest.class'
     exclude 'de/pottgames/tuningfork/test/WavInt32PcmTest.class'
     exclude 'de/pottgames/tuningfork/test/WavExtensibleFormatTest.class'
     exclude 'de/pottgames/tuningfork/test/ImaAdpcmWavMonoTest.class'
     exclude 'de/pottgames/tuningfork/test/ImaAdpcmWavStereoTest.class'
     exclude 'de/pottgames/tuningfork/test/Mp3LoadDemo.class'
     exclude 'de/pottgames/tuningfork/test/Mp3StreamDemo.class'
     exclude 'de/pottgames/tuningfork/test/SpeedOnlyChangeTest.class'
     exclude 'de/pottgames/tuningfork/test/LoaderInputStreamTest.class'
     exclude 'de/pottgames/tuningfork/test/JukeBoxTest.class'
     exclude 'de/pottgames/tuningfork/test/AuxSendsTest.class'
     exclude 'de/pottgames/tuningfork/test/SmartDeviceRerouterTest.class'
     exclude 'de/pottgames/tuningfork/test/WavULawTest.class'
     exclude 'de/pottgames/tuningfork/test/WavALawTest.class'
     exclude 'de/pottgames/tuningfork/test/AifcULawTest.class'
     exclude 'de/pottgames/tuningfork/test/AifcALawTest.class'
     exclude 'de/pottgames/tuningfork/test/MsAdpcmWavMonoTest.class'
     exclude 'de/pottgames/tuningfork/test/MsAdpcmWavStereoTest.class'
     exclude 'de/pottgames/tuningfork/test/unit/DurationTest.class'
     exclude 'de/pottgames/tuningfork/test/unit/SoundSourceUnitTest.class'
     exclude 'de/pottgames/tuningfork/test/StbVorbisTest.class'
     exclude 'de/pottgames/tuningfork/test/DirectChannelRemixTest.class'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

jmh {
   iterations = 3 // Number of measurement iterations to do.
   benchmarkMode = ['avgt'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
   batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
   fork = 0 // How many times to forks a single benchmark. Use 0 to disable forking altogether
   failOnError = true // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
   forceGC = true // Should JMH force GC between iterations?
   humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
   resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
   operationsPerInvocation = 10 // Operations per invocation.
   timeOnIteration = '2s' // Time to spend at each measurement iteration.
   resultFormat = 'TEXT' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
   timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
   verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
   warmup = '1s' // Time to spend at each warmup iteration.
   warmupBatchSize = 1 // Warmup batch size: number of benchmark method calls per operation.
   warmupForks = 1 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
   warmupIterations = 0 // Number of warmup iterations to do.
   warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].

   zip64 = false // Use ZIP64 format for bigger archives
   jmhVersion = '1.34' // Specifies JMH version
   includeTests = false // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
}
